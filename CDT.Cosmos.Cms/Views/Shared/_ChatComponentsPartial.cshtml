@{
    // Used for ChatBot
    var userName = Context.User.Identity.Name;

    /*
    * This chat component requires a button to be created
    * somewhere on the webpage with the id "chat-toast-trigger"
    * defined.  This button toggles the chat window visibility.
                            */
}
<script src="/lib/signalr/dist/browser/signalr.min.js"></script>
<div id="chat-toast" class="toast show bg-dark" style="position: fixed; top:70px;right: 70px;z-index:50000">
    <div class="toast-header">
        <strong class="me-auto">Chat</strong>
        <small>11 mins ago</small>
        <button id="btn-close-chat" type="button" class="btn-close" aria-label="Close"></button>
    </div>
    <div class="toast-body">
        @(Html.Kendo().Chat()
        .Name("ccmsChatWidget")
        .User(user => user
        // Each instance of the app will generate a unique username.
        // In this way, the SignalR Hub "knows" who is the user that sends the message
        // and who are the clients that have to receive that message.
        .Name(@userName)
        .IconUrl("https://demos.telerik.com/kendo-ui/content/chat/avatar.png")
        )
        .Events(events => events
        .TypingStart("onCcmsTypingStart")
        .Post("onCcmsChatPost")
        ).HtmlAttributes(new { style = "width:280px;height:460px;"})
        )
    </div>
</div>
<script>
    // Point to the Hub remote endpoint.
    window.ccsmsChatHub = new signalR.HubConnectionBuilder().withUrl('/chat').withAutomaticReconnect().build();

    async function startSignalR() {
        try {
            await ccsmsChatHub.start().then( result => {
               console.log("SignalR is now connected.");
            }).then( result => {
               ccmsJoinEditingRoom();
            });
        } catch (err) {
            console.log(err);
            setTimeout(start, 5000);
        }
    };

    // The `typingStart` will notify the SignallR Hub that the current client is typing.
    // The Hub, in turn, will notify all the other clients that the user has started typing.
    async function onCcmsTypingStart(e) {
        try {
            await ccsmsChatHub.invoke("sendTyping", ccmsChatWidget.getUser());
        } catch (err) {
            alert(err);
        }
    }

    // The `post` handler will send the user data and the typed text to the SignalR Hub.
    // The Hub will then forward that info to the other clients.
    async function onCcmsChatPost(args) {
        try {
            await ccsmsChatHub.invoke("send", ccmsChatWidget.getUser(), args.text);
        } catch (err) {
            alert(err);
        }
    }

    // Has this editor join the editing room.
    // Helps control article locks.
    async function ccmsJoinEditingRoom() {
        var articleId = $("#Id").val();
        if (articleId !== null && typeof(articleId) !== "undefined" && articleId !== "") {
            try {
                await ccsmsChatHub.invoke("JoinRoom", articleId);
            } catch (err) {
                alert(err);
            }
            console.log("Now in editing room.");
        }
    }

    // Let's everyone in the editing room know that the article
    // has been saved.
    async function ccmsArticleSaved() {
        var articleId = $("#Id").val();
        if (articleId != null && typeof(articleId) != "undefined" && articleId !== "") {
            try {
                await ccsmsChatHub.invoke("ArticleSaved", articleId);
            } catch (err) {
                alert(err);
            }
        }
    }

    // Receives a lock message.
    ccsmsChatHub.on("ArticleLock", function(message) {
        alert(message);
    });

    // Recives an article reload message.
    ccsmsChatHub.on("ArticleReload", function(message) {
        alert(message);
    });

    $(document).ready(function() {

        startSignalR();

        window.ccmsChatWidget = $("#ccmsChatWidget").getKendoChat();

        ccsmsChatHub.on("broadcastMessage", function(sender, message) {
            var message = { type: 'text', text: message };

            // Render the received message in the Chat.
            ccmsChatWidget.renderMessage(message, sender);
        });

        ccsmsChatHub.on("typing", function(sender) {
            // Display the typing notification in the Chat.
            ccmsChatWidget.renderMessage({ type: 'typing' }, sender);
        });

        // Chat toast popup
        document.getElementById("chat-toast-trigger").addEventListener('click', () => {
            var el = document.getElementById("chat-toast");
            el.style.display = "block";
        });
        document.getElementById("btn-close-chat").addEventListener('click', () => {
            var el = document.getElementById("chat-toast");
            el.style.display = "none";
        });

    });
</script>